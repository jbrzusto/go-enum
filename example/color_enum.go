// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"fmt"
	"strings"
)

const (
	// ColorBlackWhiteRed is a Color of type Black, White, Red
	ColorBlackWhiteRed Color = iota
	// ColorGreen is a Color of type Green
	// Green starts with 33
	ColorGreen Color = iota + 32
	// ColorBlue is a Color of type Blue
	ColorBlue
	// ColorGrey is a Color of type Grey
	ColorGrey
	// ColorYellow is a Color of type Yellow
	ColorYellow
	// ColorBlueGreen is a Color of type Blue-Green
	ColorBlueGreen
	// ColorRedOrange is a Color of type Red-Orange
	ColorRedOrange
	// ColorYellowGreen is a Color of type Yellow_green
	ColorYellowGreen
	// ColorRedOrangeBlue is a Color of type Red-Orange-Blue
	ColorRedOrangeBlue
)

const _ColorName = "Black, White, RedGreenBluegreyyellowblue-greenred-orangeyellow_greenred-orange-blue"

var _ColorMap = map[Color]string{
	0:  _ColorName[0:17],
	33: _ColorName[17:22],
	34: _ColorName[22:26],
	35: _ColorName[26:30],
	36: _ColorName[30:36],
	37: _ColorName[36:46],
	38: _ColorName[46:56],
	39: _ColorName[56:68],
	40: _ColorName[68:83],
}

// String implements the Stringer interface.
func (x Color) String() string {
	if str, ok := _ColorMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Color(%d)", x)
}

var _ColorValue = map[string]Color{
	_ColorName[0:17]:                   0,
	strings.ToLower(_ColorName[0:17]):  0,
	_ColorName[17:22]:                  33,
	strings.ToLower(_ColorName[17:22]): 33,
	_ColorName[22:26]:                  34,
	strings.ToLower(_ColorName[22:26]): 34,
	_ColorName[26:30]:                  35,
	strings.ToLower(_ColorName[26:30]): 35,
	_ColorName[30:36]:                  36,
	strings.ToLower(_ColorName[30:36]): 36,
	_ColorName[36:46]:                  37,
	strings.ToLower(_ColorName[36:46]): 37,
	_ColorName[46:56]:                  38,
	strings.ToLower(_ColorName[46:56]): 38,
	_ColorName[56:68]:                  39,
	strings.ToLower(_ColorName[56:68]): 39,
	_ColorName[68:83]:                  40,
	strings.ToLower(_ColorName[68:83]): 40,
}

// ParseColor attempts to convert a string to a Color
func ParseColor(name string) (Color, error) {

	name = strings.ToLower(name)

	if x, ok := _ColorValue[name]; ok {
		return x, nil
	}
	return Color(0), fmt.Errorf("%s is not a valid Color", name)
}

// MarshalText implements the text marshaller method
func (x Color) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Color) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseColor(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
