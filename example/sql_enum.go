// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"database/sql/driver"
	"fmt"
)

const (
	// ProjectStatusPendingInWorkCompletedRejected is a ProjectStatus of type Pending, InWork, Completed, Rejected
	ProjectStatusPendingInWorkCompletedRejected ProjectStatus = iota
)

const _ProjectStatusName = "pending, inWork, completed, rejected"

// String implements the Stringer interface.
func (x ProjectStatus) String() string {
	if x >= 0 && int(x) < len(_ProjectStatusNames) {
		return _ProjectStatusNames[x]
	}
	return fmt.Sprintf("ProjectStatus(%d)", x)
}

var _ProjectStatusValue = map[string]ProjectStatus{
	_ProjectStatusName[0:36]: 0,
}

// ParseProjectStatus attempts to convert a string to a ProjectStatus
func ParseProjectStatus(name string) (ProjectStatus, error) {

	if x, ok := _ProjectStatusValue[name]; ok {
		return x, nil
	}
	return ProjectStatus(0), fmt.Errorf("%s is not a valid ProjectStatus", name)
}

// Scan implements the Scanner interface.
func (x *ProjectStatus) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = ProjectStatus(0)
		return nil
	}

	tmp, err := ParseProjectStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x ProjectStatus) Value() (driver.Value, error) {
	return x.String(), nil
}
