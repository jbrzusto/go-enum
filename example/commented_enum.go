// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"fmt"
	"strings"
)

const (
	// CommentedValue1 is a Commented of type Value1
	// Commented value 1
	CommentedValue1 Commented = iota
	// CommentedValue2 is a Commented of type Value2
	CommentedValue2
	// CommentedValue3 is a Commented of type Value3
	// Commented value 3
	CommentedValue3
)

const _CommentedName = "value1value2value3"

// String implements the Stringer interface.
func (x Commented) String() string {
	if x >= 0 && int(x) < len(_CommentedNames) {
		return _CommentedNames[x]
	}
	return fmt.Sprintf("Commented(%d)", x)
}

var _CommentedValue = map[string]Commented{
	_CommentedName[0:6]:                    0,
	strings.ToLower(_CommentedName[0:6]):   0,
	_CommentedName[6:12]:                   1,
	strings.ToLower(_CommentedName[6:12]):  1,
	_CommentedName[12:18]:                  2,
	strings.ToLower(_CommentedName[12:18]): 2,
}

// ParseCommented attempts to convert a string to a Commented
func ParseCommented(name string) (Commented, error) {

	name = strings.ToLower(name)

	if x, ok := _CommentedValue[name]; ok {
		return x, nil
	}
	return Commented(0), fmt.Errorf("%s is not a valid Commented", name)
}

// MarshalText implements the text marshaller method
func (x Commented) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Commented) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCommented(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// Skipped value
	// Placeholder with a ','  in it. (for harder testing)
	_ ComplexCommented = iota
	// ComplexCommentedValue1 is a ComplexCommented of type Value1
	// Commented value 1
	ComplexCommentedValue1
	// ComplexCommentedValue2 is a ComplexCommented of type Value2
	ComplexCommentedValue2
	// ComplexCommentedValue3 is a ComplexCommented of type Value3
	// Commented value 3
	ComplexCommentedValue3
)

const _ComplexCommentedName = "value1value2value3"

// String implements the Stringer interface.
func (x ComplexCommented) String() string {
	if x >= 0 && int(x) < len(_ComplexCommentedNames) {
		return _ComplexCommentedNames[x]
	}
	return fmt.Sprintf("ComplexCommented(%d)", x)
}

var _ComplexCommentedValue = map[string]ComplexCommented{
	_ComplexCommentedName[0:6]:                    1,
	strings.ToLower(_ComplexCommentedName[0:6]):   1,
	_ComplexCommentedName[6:12]:                   2,
	strings.ToLower(_ComplexCommentedName[6:12]):  2,
	_ComplexCommentedName[12:18]:                  3,
	strings.ToLower(_ComplexCommentedName[12:18]): 3,
}

// ParseComplexCommented attempts to convert a string to a ComplexCommented
func ParseComplexCommented(name string) (ComplexCommented, error) {

	name = strings.ToLower(name)

	if x, ok := _ComplexCommentedValue[name]; ok {
		return x, nil
	}
	return ComplexCommented(0), fmt.Errorf("%s is not a valid ComplexCommented", name)
}

// MarshalText implements the text marshaller method
func (x ComplexCommented) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ComplexCommented) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseComplexCommented(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
