// Code generated by go-enum
// DO NOT EDIT!

package example

import (
	"fmt"
	"strings"
)

const (
	// MakeToyotaChevyFordTeslaHyundaiNissanJaguarAudiBMWMercedesBenzVolkswagon is a Make of type Toyota,_,Chevy,_,Ford,_,Tesla,_,Hyundai,_,Nissan,_,Jaguar,_,Audi,_,BMW,_,Mercedes-Benz,_,Volkswagon
	MakeToyotaChevyFordTeslaHyundaiNissanJaguarAudiBMWMercedesBenzVolkswagon Make = iota
)

const _MakeName = "Toyota,_,Chevy,_,Ford,_,Tesla,_,Hyundai,_,Nissan,_,Jaguar,_,Audi,_,BMW,_,Mercedes-Benz,_,Volkswagon"

var _MakeNames = []string{
	_MakeName[0:99],
}

// MakeNames returns a list of possible string values of Make.
func MakeNames() []string {
	tmp := make([]string, len(_MakeNames))
	copy(tmp, _MakeNames)
	return tmp
}

// String implements the Stringer interface.
func (x Make) String() string {
	if x >= 0 && int(x) < len(_MakeNames) {
		return _MakeNames[x]
	}
	return fmt.Sprintf("Make(%d)", x)
}

var _MakeValue = map[string]Make{
	_MakeName[0:99]:                  0,
	strings.ToLower(_MakeName[0:99]): 0,
}

// ParseMake attempts to convert a string to a Make
func ParseMake(name string) (Make, error) {

	name = strings.ToLower(name)

	if x, ok := _MakeValue[name]; ok {
		return x, nil
	}
	return Make(0), fmt.Errorf("%s is not a valid Make, try [%s]", name, strings.Join(_MakeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x Make) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Make) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseMake(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *Make) Set(val string) error {
	v, err := ParseMake(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Make) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Make) Type() string {
	return "Make"
}
