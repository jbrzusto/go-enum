// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.577kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\xb6\x13\x7f\xb6\xfe\x8a\xab\x90\x14\x52\xbe\x8e\x9c\x2f\xf6\xd6\xcd\x7b\x69\xbb\xa0\x03\xd2\x14\x48\xb6\x17\x23\x08\x18\xe9\x64\x13\x91\x28\x95\xa4\x5d\x19\x1a\xff\xf7\xe1\x48\xca\xa6\x15\x3b\x1d\x86\xf5\xc5\xb0\x78\xbf\x3f\xf7\xb9\x23\xfb\xfe\x12\x0a\x2c\xb9\x40\x88\x57\xc8\x0a\x94\xb1\x31\xd1\x6c\x06\xef\x9b\x02\x61\x89\x02\x25\xd3\x58\xc0\xd3\x16\x96\xcd\x25\x8a\x75\x4d\xc2\x0f\xb7\xf0\xf9\xf6\x1e\x3e\x7e\xf8\x74\xff\x26\x8a\x5a\x96\x3f\xb3\x25\x42\xdf\x67\xfe\xaf\x31\x51\xc4\xeb\xb6\x91\x1a\x92\x08\x00\x20\x2e\x6b\x1d\x47\x69\xd4\xf7\x28\x0a\xb8\x24\x79\x18\x99\xfc\x52\xdc\xbc\x11\x8a\x4c\x48\x76\x46\x87\x9f\x59\x8d\xf0\x6e\x0e\x19\x7d\x64\xf6\x8b\x8c\xad\x7c\xc3\xa4\x22\x59\xc1\x73\x0d\x71\xc5\x94\x6e\xca\x52\xa1\x8e\xe1\xca\x2b\x81\x64\x62\x89\x70\x26\x3f\x89\x02\xbb\x29\x99\x54\xeb\xc0\xdf\x9f\xf4\xa9\xc0\x98\x68\x62\x3d\x92\x8f\x5b\xeb\x83\x74\xda\x6a\x9d\x3f\x1f\x3a\x76\x31\xff\x82\x92\x4b\xa5\xc1\x98\xbe\x87\xb3\x66\x67\xa0\xd6\x4f\x3e\x84\xf3\x3c\x04\xf6\x01\x80\x97\x80\x5f\x07\x0d\x5b\x4b\xfc\x18\x1b\x33\x9b\xc1\xdd\x33\x6f\x5b\x2c\xc0\x8a\xfa\x1e\x2b\x85\xf6\xbc\xef\xbd\xf6\x17\x89\x25\xef\xb0\x20\x2b\x63\x80\x2b\x60\x24\x1c\x20\x32\x06\x9a\x12\xf4\xb6\xc5\xbd\x89\x3b\xb7\x80\x0f\x05\xf2\x72\x88\xfe\xbe\xa9\x6b\x14\x9a\x04\x61\x98\xe0\x98\xf4\x9d\x29\xf5\xef\x54\x22\xfb\xaa\x7c\xa9\x57\x16\x95\x30\xb1\x39\xf0\x46\x33\xa7\x28\x10\xae\x76\x88\x19\x03\xff\x83\x00\xc1\x5d\xb2\x0e\x00\xaf\x1f\x36\x25\xd4\x7c\x19\xe2\xa4\xb7\xb3\x47\xdb\x1d\x72\x60\xfb\x77\xd8\x52\xf7\xc7\x93\xca\x55\x9c\x12\x3b\x41\x63\xdd\x56\x4c\x23\xc4\x4a\x4b\x2e\x96\x28\x63\xc8\xa8\x97\x34\x01\x5f\x98\x54\xd8\xf7\x7b\x5e\x1a\x03\x4c\x93\x89\x56\xa0\x1b\xc8\x1b\xb1\x41\xa9\x81\x81\x33\xa6\x33\x6a\x59\x68\x10\x95\x6b\x91\x1f\xf3\x94\x08\x22\x87\x33\x4c\x21\x39\x14\x4e\x01\xa5\x6c\x64\x0a\x7d\x34\xe1\x25\x74\x53\x68\x9e\xa9\xbe\xc7\x43\x35\xcb\xc0\x05\x39\x7a\xf8\x99\x34\xfa\x68\x32\x91\xa8\xd7\x52\x90\x89\xe0\x55\x34\xb1\x5d\xe6\x25\x64\xa4\xa5\xec\xcc\x0c\x2a\xa3\x7c\xae\xd2\x29\x94\xb5\xce\x3e\x52\xe4\x32\x89\xcf\x15\x51\x50\x34\x54\xdf\x86\x55\xbc\x80\x71\x8e\x5a\x6e\x61\x71\xae\x1e\xe2\x29\x90\xf7\xa9\xaf\x46\x65\xbf\x37\x5c\x24\xa3\x5c\xe9\x57\x4d\x21\x9e\x42\x9c\xa6\x9e\x7a\xc4\x80\xff\x30\x23\x9f\x47\x1a\x12\xdb\x2e\x21\xa2\x59\x56\x33\xa9\x56\xac\x02\xb7\xfa\x6e\xdc\xd7\x3d\x76\x1a\x78\xdd\x56\x48\x33\xa1\x40\xaf\x10\x34\x9d\x79\xed\x0a\x25\xd4\xa8\x57\x4d\xe1\x1a\x99\x74\xa3\x98\x69\xe8\x29\x49\x21\x59\x3c\x3c\x6d\x35\x86\x0d\xf4\xc5\x39\x41\xd2\x65\x77\x16\xa5\x24\x4d\x5d\x8b\x1c\xd7\xfe\x10\xf5\x77\x32\x5a\x8b\xd3\x39\x5d\x8c\x93\x3a\x70\x97\x58\x7b\x17\x3f\x75\x89\x51\x5e\xc2\xef\x5d\xd7\x35\xab\x94\x46\x13\x5d\xb7\x36\x79\x92\x9c\xa2\x6d\x6a\x59\x49\x4a\x6f\xe6\x54\x43\x48\x3c\x94\xd2\xb2\xee\xa2\x83\x39\xe8\xba\xdd\xd5\xef\x6a\x1d\x76\xd5\xd0\x15\xf5\x75\xe8\xc8\x5d\xce\xc4\xb8\x70\x3a\x13\x28\x81\x0b\x8d\xb2\x64\x39\x66\xa7\x4b\x26\xdd\xc4\x2d\xff\x9d\x7a\x6f\x82\x7a\x37\x4c\x42\x30\x74\x51\x34\x51\xdf\xb8\xce\x57\xb0\xa1\x5a\xdd\xea\x4b\x68\xbf\xda\xae\xe5\x4c\x0d\x9a\xef\xa2\x89\x03\x6b\x0e\x1b\x2f\x70\x60\x06\x02\x0f\xe2\x26\xf5\x0a\x82\x57\x24\xb5\x28\xbc\xa0\xf5\x1e\x2d\x3f\xa3\x3f\x1c\x76\x02\xd8\xdd\x57\x23\x84\x0b\xc9\x37\x28\x9d\xec\x28\xce\x63\x98\xad\x26\x11\xdd\x59\xba\x5b\xf0\x08\xdd\xf7\x3c\x9f\x9e\x68\x7d\x59\xb1\xe5\xd0\x7b\x7c\xc1\xf9\xeb\xa6\x62\x62\x09\xa4\xe4\x6f\xda\x5d\x72\x40\xb9\xbd\xc6\x04\xd4\x44\x84\xdd\x72\xdd\x33\xe0\x55\x88\x37\xac\x4a\x3d\x80\x9b\x28\xc4\xd5\xc1\x77\xfd\x7a\x8e\xd7\xa8\x75\x88\xe0\xf7\x92\xbc\x46\x5a\x17\x01\x53\x03\xec\x2e\x3a\x1f\xf3\x9e\x6e\xfb\x51\xd0\x25\xd7\xab\xf5\x53\x96\x37\xf5\x4c\xb5\xe5\xff\x7f\x9a\xb5\xbf\x11\x90\x23\x8c\x5e\x89\x4c\x4e\x93\x74\xb8\xb3\xf6\x51\xe3\xd1\x36\x3d\x6c\x99\xff\x73\xf0\xa4\xdb\xdd\x99\xbb\x67\xdd\x91\xa5\x0f\x73\xf2\xec\xc3\xf1\x72\xeb\xde\x65\x40\x01\x06\x26\xb8\xbb\xc9\x18\x9a\xd0\x63\xd7\x86\x9d\x21\xc1\xea\x9d\xb5\xbf\xa0\x8f\xa9\xba\x62\xe8\xed\x54\x71\xa5\xe9\xc9\xd4\x36\x4a\xf1\xa7\x6a\x98\x66\x37\xe9\x8a\x24\x87\xf6\x1e\xb2\x23\x4e\x93\x14\x16\x0f\x7b\xbc\x74\xdd\x12\x87\x6a\xf6\x8c\xc9\x70\x3e\x85\x0a\x8f\xdf\x79\x74\xdb\xe5\x4d\xbb\x4d\xec\x88\x1f\xd5\xd8\xb5\x80\x06\xd7\x3e\x6a\x83\x17\xb4\x43\x08\xb1\xb8\xf3\x68\xdf\xb0\x96\xc6\xe6\x08\x58\x24\x21\xa8\xa0\x66\x6d\x88\xb4\x05\xcb\x99\xbf\xd8\xb0\xde\xe9\x3f\x19\xfd\x61\xa0\x03\xea\xf0\x92\x3e\x4e\x3c\x4f\x6e\x58\xbb\xe8\x5e\xbc\x4c\x94\x76\x9b\xca\x7f\xd2\x05\x7f\xd7\x4a\x2e\x74\x99\x8c\x18\x98\x9c\x17\x69\x3c\x85\x2e\xf5\x98\xd0\x73\xc1\xef\x8b\x1f\x54\x4b\x07\xbf\xce\xe1\x0a\xde\xbe\x25\x17\x49\x97\xc2\x2f\xa7\xdb\x1a\xd6\x74\x4c\x61\xd1\x3d\xfc\xcb\x3a\x45\x71\xa2\xbf\x6e\xc6\x6d\x87\xe9\x35\x10\xf4\x38\xab\x9a\x6f\x28\xed\xcd\x63\xf6\x63\xfb\x77\x00\x00\x00\xff\xff\xcf\xff\x45\xa7\xf9\x0d\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xd4, 0xb0, 0x88, 0xfe, 0x38, 0x61, 0xe8, 0x99, 0xfb, 0x92, 0x7f, 0x13, 0xaa, 0x8a, 0xf7, 0x9f, 0x91, 0xbe, 0x97, 0xd8, 0xac, 0xd5, 0x75, 0xa8, 0x42, 0x75, 0x26, 0x79, 0x62, 0x8d, 0x6f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
