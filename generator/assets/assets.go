// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.578kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\xb6\x13\x7f\xb6\xfe\x8a\xab\x90\x14\x52\xbe\x8e\x9c\x2f\xf6\xd6\xcd\x7b\x69\xbb\xa0\x03\xd2\x14\x48\xb6\x17\x23\x08\x18\xe9\x64\x13\x91\x28\x95\xa4\x5d\x19\x9a\xfe\xf7\xe1\x48\x4a\xa6\x15\x39\x1d\x86\xf5\xc5\xb0\x78\xbf\x3f\xf7\xb9\x23\xdb\xf6\x12\x32\xcc\xb9\x40\x08\x37\xc8\x32\x94\x61\xd7\x05\x8b\x05\xbc\xaf\x32\x84\x35\x0a\x94\x4c\x63\x06\x4f\x7b\x58\x57\x97\x28\xb6\x25\x09\x3f\xdc\xc2\xe7\xdb\x7b\xf8\xf8\xe1\xd3\xfd\x9b\x20\xa8\x59\xfa\xcc\xd6\x08\x6d\x9b\xb8\xbf\x5d\x17\x04\xbc\xac\x2b\xa9\x21\x0a\x00\x00\xc2\xbc\xd4\x61\x10\x07\x6d\x8b\x22\x83\x4b\x92\xfb\x91\xc9\x2f\xc5\x4d\x2b\xa1\xc8\x84\x64\x67\x74\xf8\x99\x95\x08\xef\x96\x90\xd0\x47\x62\xbe\xc8\xd8\xc8\x77\x4c\x2a\x92\x65\x3c\xd5\x10\x16\x4c\xe9\x2a\xcf\x15\xea\x10\xae\x9c\x12\x48\x26\xd6\x08\x67\xf2\x93\xc8\xb0\x99\x93\x49\xb1\xf5\xfc\xfd\x49\x9f\x0a\xba\x2e\x98\x19\x8f\xe4\xe3\xd6\xf8\x20\x9d\xba\xd8\xa6\xcf\xc7\x8e\x6d\xcc\xbf\x20\xe7\x52\x69\xe8\xba\xb6\x85\xb3\x6a\x30\x50\xdb\x27\x17\xc2\x7a\xee\x03\xbb\x00\xc0\x73\xc0\xaf\xbd\x86\xa9\x25\x7c\x0c\xbb\x6e\xb1\x80\xbb\x67\x5e\xd7\x98\x81\x11\xb5\x2d\x16\x0a\xcd\x79\xdb\x3a\xed\x2f\x12\x73\xde\x60\x46\x56\x5d\x07\x5c\x01\x23\x61\x0f\x51\xd7\x41\x95\x83\xde\xd7\x78\x30\xb1\xe7\x06\xf0\xbe\x40\x9e\xf7\xd1\xdf\x57\x65\x89\x42\x93\xc0\x0f\xe3\x1d\x93\xbe\x35\xa5\xfe\x9d\x4a\xe4\x50\x95\x2b\xf5\xca\xa0\xe2\x27\xb6\x04\x5e\x69\x66\x15\x05\xc2\xd5\x80\x58\xd7\xc1\xff\xc0\x43\x70\x48\xd6\x02\xe0\xf4\xfd\xa6\xf8\x9a\x2f\x43\x9c\xf4\x76\xf6\x68\xba\x43\x0e\x4c\xff\x8e\x5b\x6a\xff\x38\x52\xd9\x8a\x63\x62\x27\x68\x2c\xeb\x82\x69\x84\x50\x69\xc9\xc5\x1a\x65\x08\x09\xf5\x92\x26\xe0\x0b\x93\x0a\xdb\xf6\xc0\xcb\xae\x03\xa6\xc9\x44\x2b\xd0\x15\xa4\x95\xd8\xa1\xd4\xc0\xc0\x1a\xd3\x19\xb5\xcc\x37\x08\xf2\xad\x48\xa7\x3c\x45\x82\xc8\x61\x0d\x63\x88\x8e\x85\x73\x40\x29\x2b\x19\x43\x1b\xcc\x78\x0e\xcd\x1c\xaa\x67\xaa\xef\xf1\x58\xcd\x30\x70\x45\x8e\x1e\x7e\x26\x8d\x36\x98\xcd\x24\xea\xad\x14\x64\x22\x78\x11\xcc\x4c\x97\x79\x0e\x09\x69\x29\x33\x33\xbd\xca\x28\x9f\xab\x78\x0e\x79\xa9\x93\x8f\x14\x39\x8f\xc2\x73\x45\x14\x14\x15\xd5\xb7\x63\x05\xcf\x60\x9c\xa3\x96\x7b\x58\x9d\xab\x87\x70\x0e\xe4\x7d\xee\xaa\x51\xc9\xef\x15\x17\xd1\x28\x57\xfa\x55\x73\x08\xe7\x10\xc6\xb1\xa3\x1e\x31\xe0\x3f\xcc\xc8\xe5\x11\xfb\xc4\x36\x4b\x88\x68\x96\x94\x4c\xaa\x0d\x2b\xc0\xae\xbe\x1b\xfb\x75\x8f\x8d\x06\x5e\xd6\x05\xd2\x4c\x28\xd0\x1b\x04\x4d\x67\x4e\xbb\x40\x09\x25\xea\x4d\x95\xd9\x46\x46\xcd\x28\x66\xec\x7b\x8a\x62\x88\x56\x0f\x4f\x7b\x8d\x7e\x03\x5d\x71\x56\x10\x35\xc9\x9d\x41\x29\x8a\x63\xdb\x22\xcb\xb5\x3f\x44\xf9\x9d\x8c\xb6\xe2\x74\x4e\x17\xe3\xa4\x8e\xdc\x45\xc6\xde\xc6\x8f\x6d\x62\x94\x97\x70\x7b\xd7\x76\xcd\x28\xc5\xc1\x4c\x97\xb5\x49\x9e\x24\xa7\x68\x1b\x1b\x56\x92\xd2\x9b\x25\xd5\xe0\x13\x0f\xa5\x34\xac\xbb\x68\x60\x09\xba\xac\x87\xfa\x6d\xad\xfd\xae\xea\xbb\xa2\xbe\xf6\x1d\xb9\x4b\x99\x18\x17\x4e\x67\x02\x25\x70\xa1\x51\xe6\x2c\xc5\xe4\x74\xc9\xa4\x1b\xd9\xe5\x3f\xa8\xb7\x9d\x57\xef\x8e\x49\xf0\x86\x2e\x08\x66\xea\x1b\xd7\xe9\x06\x76\x54\xab\x5d\x7d\x11\xed\x57\xd3\xb5\x94\xa9\x5e\xf3\x5d\x30\xb3\x60\x2d\x61\xe7\x04\x16\x4c\x4f\xe0\x40\xdc\xc5\x4e\x41\xf0\x82\xa4\x06\x85\x17\xb4\x3e\xa0\xe5\x66\xf4\x87\xc3\x4e\x00\xdb\xfb\x6a\x84\x70\x26\xf9\x0e\xa5\x95\x4d\xe2\x3c\x86\xd9\x68\x12\xd1\xad\xa5\xbd\x05\x27\xe8\x7e\xe0\xf9\xfc\x44\xeb\xf3\x82\xad\xfb\xde\xe3\x0b\xce\x5f\x57\x05\x13\x6b\x20\x25\x77\xd3\x0e\xc9\x01\xe5\xf6\x1a\x13\x50\x13\x11\x86\xe5\x7a\x60\xc0\xab\x10\xef\x58\x11\x3b\x00\x77\x81\x8f\xab\x85\xef\xfa\xf5\x1c\xaf\x51\x6b\x1f\xc1\xef\x25\x79\x8d\xb4\x2e\x3c\xa6\x7a\xd8\x5d\x34\x2e\xe6\x3d\xdd\xf6\xa3\xa0\x6b\xae\x37\xdb\xa7\x24\xad\xca\x85\xaa\xf3\xff\xff\xb4\xa8\x7f\x23\x20\x47\x18\xbd\x12\x99\x9c\x46\x71\x7f\x67\x1d\xa2\x86\xa3\x6d\x7a\xdc\x32\xf7\xe7\xe8\x49\x37\xdc\x99\xc3\xb3\x6e\x62\xe9\xc3\x92\x3c\xbb\x70\x3c\xdf\xdb\x77\x19\x50\x80\x9e\x09\xf6\x6e\xea\x3a\x9a\xd0\xa9\x6b\xc3\xcc\x90\x60\xe5\x60\xed\x2e\xe8\x29\x55\x5b\x0c\xbd\x9d\x0a\xae\x34\x3d\x99\xea\x4a\x29\xfe\x54\xf4\xd3\x6c\x27\x5d\x91\xe4\xd8\xde\x41\x36\xe1\x34\x8a\x61\xf5\x70\xc0\x4b\x97\x35\x71\xa8\x64\xcf\x18\xf5\xe7\x73\x28\x70\xfa\xce\xa3\xdb\x2e\xad\xea\x7d\x64\x46\x7c\x52\x63\x68\x01\x0d\xae\x79\xd4\x7a\x2f\x68\x8b\x10\x62\x76\xe7\xd0\xbe\x61\x35\x8d\xcd\x04\x58\x24\x21\xa8\xa0\x64\xb5\x8f\xb4\x01\xcb\x9a\xbf\xd8\xb0\xce\xe9\x3f\x19\xfd\x7e\xa0\x3d\xea\xf0\x9c\x3e\x4e\x3c\x4f\x6e\x58\xbd\x6a\x5e\xbc\x4c\x94\xb6\x9b\xca\x7d\xd2\x05\x7f\x57\x4b\x2e\x74\x1e\x8d\x18\x18\x9d\x67\x71\x38\x87\x26\x76\x98\xd0\x73\xc1\xed\x8b\x1f\x54\x4b\x03\xbf\x2e\xe1\x0a\xde\xbe\x25\x17\x51\x13\xc3\x2f\xa7\xdb\xea\xd7\x34\xa5\xb0\x6a\x1e\xfe\x45\x9d\x53\x6d\xb5\xa3\x6d\x1a\x4b\x8f\x00\xaf\xb5\x49\x51\x7d\x43\x69\x2e\x9c\x6e\xe0\x4d\x77\x98\xdb\xbf\x03\x00\x00\xff\xff\x4a\x27\x09\xeb\xfa\x0d\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x66, 0x83, 0xcf, 0x2f, 0xda, 0x9, 0xea, 0x84, 0x37, 0x40, 0x74, 0x4a, 0x9f, 0x43, 0x4e, 0x57, 0xde, 0xd, 0x73, 0xc4, 0x7c, 0x1a, 0x6d, 0x12, 0x69, 0x5d, 0x15, 0x85, 0xbd, 0x78, 0xe3, 0x98}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
