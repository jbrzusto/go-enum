// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.641kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xdf\x6f\xdb\xb6\x13\x7f\xb6\xfe\x8a\xab\x90\x14\x52\xbe\x8e\x9c\x2f\xf6\xd6\xcd\x7b\x69\xbb\xa0\x03\xd2\x14\x48\xb6\x17\x23\x08\x18\xe9\x64\x13\x91\x28\x95\xa4\x5d\x19\x9a\xfe\xf7\xe1\x48\x4a\xa6\x15\x39\x1d\x86\xd5\x4f\x16\xef\xf7\xe7\x3e\xc7\x63\xdb\x5e\x42\x86\x39\x17\x08\xe1\x06\x59\x86\x32\xec\xba\x60\xb1\x80\xf7\x55\x86\xb0\x46\x81\x92\x69\xcc\xe0\x69\x0f\xeb\xea\x12\xc5\xb6\x24\xe1\x87\x5b\xf8\x7c\x7b\x0f\x1f\x3f\x7c\xba\x7f\x13\x04\x35\x4b\x9f\xd9\x1a\xa1\x6d\x13\xf7\xb7\xeb\x82\x80\x97\x75\x25\x35\x44\x01\x00\x40\x98\x97\x3a\x0c\xe2\xa0\x6d\x51\x64\x70\x49\x72\x3f\x32\xf9\xa5\xb8\x69\x25\x14\x99\x90\xec\x8c\x0e\x3f\xb3\x12\xe1\xdd\x12\x12\xfa\x48\xcc\x17\x19\x1f\xc9\x55\xcd\xd2\x91\x92\x3d\x1a\x34\x77\x4c\x2a\x52\xc8\x78\xaa\x21\x2c\x98\xd2\x55\x9e\x2b\xd4\x21\x5c\x39\x25\x90\x4c\xac\x11\xce\xe4\x27\x91\x61\x33\x27\x93\x62\xeb\x39\xfd\x93\x3e\x15\x74\x5d\x30\x33\x1e\xc9\xc7\xad\xf1\x41\x3a\x75\xb1\x4d\x9f\x8f\x1d\xdb\x98\x7f\x41\xce\xa5\xd2\xd0\x75\x6d\x0b\x67\xd5\x60\xa0\xb6\x4f\x2e\x84\xf5\xdc\x07\x76\x01\x80\xe7\x80\x5f\x7b\x0d\x53\x75\xf8\x18\x76\xdd\x62\x01\x77\xcf\xbc\xae\x31\x03\x23\x6a\x5b\x2c\x14\x9a\xf3\xb6\x75\xda\x5f\x24\xe6\xbc\xc1\x8c\xac\xba\x0e\xb8\x02\x46\xc2\x1e\xac\xae\x83\x2a\x07\xbd\xaf\xf1\x60\x62\xcf\x4d\x6b\xfa\x02\x79\xde\x47\x7f\x5f\x95\x25\x0a\x4d\x02\x3f\x8c\x77\x4c\xfa\xd6\x14\xdc\xcf\x8b\x67\x3a\x41\xce\xa7\xd3\x3b\xd4\xea\x00\xb8\x32\x58\xf9\xe9\x2e\x81\x57\x9a\x59\x45\x81\x70\x35\xe0\xd8\x75\xf0\x3f\xf0\x70\x1d\x4a\xb0\xb0\x38\x7d\xbf\x55\xbe\xe6\xcb\x10\x27\xbd\x9d\x3d\x9a\x9e\x91\x03\xd3\xd5\xe3\x46\xdb\x3f\x8e\x6a\x16\x87\x98\xd8\x0d\x1a\xcb\xba\x60\x1a\x21\x54\x5a\x72\xb1\x46\x19\x42\x42\x1d\xa6\x09\xfa\xc2\xa4\xc2\xb6\x3d\x50\xb6\xeb\x80\x69\x32\xd1\x0a\x74\x05\x69\x25\x76\x28\x35\x30\xb0\xc6\x74\x46\x8d\xf4\x0d\x82\x7c\x2b\xd2\x29\x4f\x91\x20\xca\x58\xc3\x18\xa2\x63\xe1\x1c\x50\xca\x4a\xc6\xd0\x06\x33\x9e\x43\x33\x87\xea\x99\xea\x7b\x3c\x56\x33\xbc\x5c\x91\xa3\x87\x9f\x49\xa3\x0d\x66\x33\x89\x7a\x2b\x05\x99\x08\x5e\x04\x33\xd3\x7b\x9e\x43\x42\x5a\xca\x4c\x52\xaf\x32\xca\xe7\x2a\x9e\x43\x5e\xea\xe4\x23\x45\xce\xa3\xf0\x5c\x11\x31\x45\x45\xf5\xed\x58\xc1\x33\x18\xe7\xa8\xe5\x1e\x56\xe7\xea\x21\x9c\x03\x79\x9f\xbb\x6a\x54\xf2\x7b\xc5\x45\x34\xca\xd5\x10\x6d\x0e\xe1\x1c\xc2\x38\x76\x84\x24\x06\xfc\x87\x19\xb9\x3c\x62\x9f\xee\xe6\x12\x23\x9a\x25\x25\x93\x6a\xc3\x0a\xb0\x57\xe7\x8d\xfd\xba\xc7\x46\x03\x2f\xeb\x02\x69\x52\x14\xe8\x0d\x82\xa6\x33\xa7\x5d\xa0\x84\x12\xf5\xa6\xca\x6c\x23\xa3\x66\x14\x33\xf6\x3d\x45\x31\x44\xab\x87\xa7\xbd\x46\xbf\x81\xae\x38\x2b\x88\x9a\xe4\xce\xa0\x14\xc5\xb1\x6d\x91\xe5\xda\x1f\xa2\xfc\x4e\x46\x5b\x71\x3a\xa7\x8b\x71\x52\x47\xee\x22\x63\x6f\xe3\xc7\x36\x31\xca\x4b\xb8\x7b\xdb\x76\xcd\x28\xc5\xc1\x4c\x97\xb5\x49\x9e\x24\xa7\x68\x1b\x1b\x56\x92\xd2\x9b\x25\xd5\xe0\x13\x0f\xa5\x34\xac\xbb\x68\x60\x09\xba\xac\x87\xfa\x6d\xad\xfd\x0d\xd6\x77\x45\x7d\xed\x3b\x72\x97\x32\x31\x2e\x9c\xce\x04\x4a\xe0\x42\xa3\xcc\x59\x8a\xc9\xe9\x92\x49\x37\xb2\x2b\x61\x50\x6f\x3b\xaf\xde\x1d\x93\xe0\x0d\x5d\x10\xcc\xd4\x37\xae\xd3\x0d\xec\xa8\x56\x7b\xf5\x45\x74\xeb\x9a\xae\xa5\x4c\xf5\x9a\xef\x82\x99\x05\x6b\x09\x3b\x27\xb0\x60\x7a\x02\x07\xe2\x2e\x76\x0a\x82\x17\x24\x35\x28\xbc\xa0\xf5\x01\x2d\x37\xa3\x3f\x1c\x76\x02\xd8\x6e\xb1\x11\xc2\x99\xe4\x3b\x94\x56\x36\x89\xf3\x18\x66\xa3\x49\x44\xb7\x96\x76\x37\x4e\xd0\xfd\xc0\xf3\xf9\x89\xd6\xe7\x05\x5b\xf7\xbd\xc7\x17\x9c\xbf\xae\x0a\x26\xd6\x40\x4a\x6e\xff\x0e\xc9\x01\xe5\xf6\x1a\x13\x50\x13\x11\x86\xcb\xf5\xc0\x80\x57\x21\xde\xb1\x22\x76\x00\xee\x02\x1f\x57\x0b\xdf\xf5\xeb\x39\x5e\xa3\xd6\x3e\x82\xdf\x4b\xf2\x1a\xe9\xba\xf0\x98\xea\x61\x77\xd1\xb8\x98\xf7\xf4\x06\x18\x05\x5d\x73\xbd\xd9\x3e\x25\x69\x55\x2e\x54\x9d\xff\xff\xa7\x45\xfd\x1b\x01\x39\xc2\xe8\x95\xc8\xe4\x34\x8a\xfb\x9d\x75\x88\x1a\x8e\x6e\xd3\xe3\x96\xb9\x3f\x47\x4f\xc2\x61\x67\x0e\xcf\xc2\x89\x4b\x1f\x96\xe4\xd9\x85\xe3\xf9\xde\xbe\xd6\x80\x02\xf4\x4c\xb0\xbb\xa9\xeb\x68\x42\xa7\xd6\x86\x99\x21\xc1\xca\xc1\xda\x2d\xe8\x29\x55\x5b\x0c\xbd\xa8\x0a\xae\x34\x3d\xa4\xea\x4a\x29\xfe\x54\xf4\xd3\x6c\x27\x5d\x91\xe4\xd8\xde\x41\x36\xe1\x34\x8a\x61\xf5\x70\xc0\x4b\x97\x35\x71\xa8\x64\xcf\x18\xf5\xe7\x73\x28\x70\x7a\xe7\xd1\xb6\x4b\xab\x7a\x1f\x99\x11\x9f\xd4\x18\x5a\x40\x83\x6b\x9e\xba\xde\x0b\xdc\x22\x84\x98\xdd\x39\xb4\x6f\x58\x4d\x63\x33\x01\x16\x49\x08\x2a\x28\x59\xed\x23\x6d\xc0\xb2\xe6\x2f\x6e\x58\xe7\xf4\x9f\x8c\x7e\x3f\xd0\x1e\x75\x78\x4e\x1f\x27\x9e\x27\x37\xac\x5e\x35\x2f\x5e\x26\x4a\xdb\x9b\xca\x7d\xd2\x82\xbf\xab\x25\x17\x3a\x8f\x46\x0c\x8c\xce\xb3\x38\x9c\x43\x13\x3b\x4c\xe8\xb9\xe0\xee\x8b\x1f\x54\x4b\x03\xbf\x2e\xe1\x0a\xde\xbe\x25\x17\x51\x13\xc3\x2f\xa7\xdb\xea\xd7\x34\xa5\xb0\x6a\x1e\xfe\x65\x9d\x22\x3b\xd1\x5f\x3b\xe3\xa6\xc3\xf4\x1a\xf0\x7a\x9c\x14\xd5\x37\x94\x66\xf3\x74\x87\xb1\xfd\x3b\x00\x00\xff\xff\x3b\xdd\x6a\xe6\x39\x0e\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0x9e, 0xe2, 0x84, 0x72, 0xd3, 0x33, 0xda, 0x31, 0xdd, 0x9e, 0x8d, 0xf1, 0x84, 0x67, 0xa8, 0xc0, 0xae, 0x15, 0x50, 0xec, 0xa, 0x80, 0x3f, 0x37, 0x5e, 0xe, 0xe, 0xcb, 0x1d, 0x56, 0xa9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
