// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.981kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x51\x6f\xdc\x36\x0c\x7e\x3e\xff\x0a\xd6\x48\x0b\xbb\xbb\x5e\x32\xec\xad\xdb\x0d\x18\xda\x2e\xe8\xb0\x36\xc5\x92\xed\x61\x41\x50\x28\x36\x7d\x11\x62\x4b\xae\xa4\xbb\xfa\xe0\xf9\xbf\x0f\x94\x64\x9f\xec\xf8\xd2\x62\x58\xf3\x74\x16\xc9\x8f\xe4\x47\x52\x62\xda\xf6\x05\xe4\x58\x70\x81\x10\xdf\x21\xcb\x51\xc5\x5d\x17\x9d\x9e\xc2\x2b\x99\x23\x6c\x50\xa0\x62\x06\x73\xb8\xdd\xc3\x46\xbe\x40\xb1\xad\x48\xf8\xfa\x02\xde\x5f\x5c\xc1\x9b\xd7\x6f\xaf\x9e\x44\x51\xcd\xb2\x7b\xb6\x41\x68\xdb\x95\xff\xd9\x75\x51\xc4\xab\x5a\x2a\x03\x49\x04\x00\x10\x17\x95\x89\xa3\x34\x6a\x5b\x14\x39\xbc\x20\x79\xe8\x99\x70\xc9\x6f\x26\x85\x26\x13\x92\x9d\xd0\xe1\x7b\x56\x21\xbc\x5c\xc3\x8a\x3e\x56\xf6\x8b\x8c\x47\x72\x5d\xb3\x6c\xa2\xe4\x8e\x06\xcd\x1d\x53\x9a\x14\x72\x9e\x19\x88\x4b\xa6\x8d\x2c\x0a\x8d\x26\x86\x33\xaf\x04\x8a\x89\x0d\xc2\x89\x7a\x2b\x72\x6c\x96\x64\x52\x6e\x03\xd0\xbf\xe8\x53\x43\xd7\x45\x0b\x8b\x48\x18\x17\x16\x83\x74\xea\x72\x9b\xdd\x8f\x81\x9d\xcf\x7f\xa0\xe0\x4a\x1b\xe8\xba\xb6\x85\x13\x39\x18\xe8\xed\xad\x77\xe1\x90\x7b\xc7\xde\x01\xf0\x02\xf0\x53\xaf\x61\xb3\x8e\x3f\xc6\x5d\x77\x7a\x0a\x97\xf7\xbc\xae\x31\x07\x2b\x6a\x5b\x2c\x35\xda\xf3\xb6\x1d\xf3\x41\x1e\xbd\xfd\x07\x85\x05\x6f\x30\x27\x59\xd7\x01\xd7\xc0\x42\xf5\xae\x03\x59\x80\xd9\xd7\x54\xc0\xc0\x25\x21\xa0\xc8\xfb\x94\x79\xd1\xc7\xf3\x4a\x56\x15\x0a\x43\x02\xe7\xf8\xc1\x31\xe9\x3b\x53\xf0\x7f\x5f\x1f\xde\x21\x7b\x4f\xc9\x99\x65\x2f\x0c\x77\x0d\x5c\x1a\xe6\x14\x05\xc2\xd9\xc0\x6c\xd7\xc1\x77\x10\x30\x3d\xa4\xe0\x88\xf2\xfa\x61\xf1\x42\xcd\x87\x2e\x8e\xa2\x9d\x7c\xb4\x55\x24\x00\x5b\xe7\x71\xe9\xdd\x0f\xdf\x7c\x8e\x87\x94\xfa\x1d\x0c\x56\x75\xc9\x0c\x42\xac\x8d\xe2\x62\x83\x2a\x86\x15\xd5\x9c\x66\xea\x03\x53\x1a\xdb\xf6\xd0\xc4\x5d\x07\xcc\x90\x89\xd1\x60\x24\x64\x52\xec\x50\x19\x60\xe0\x8c\xe9\x8c\x0a\x19\x1a\x44\xc5\x56\x64\x73\x48\x89\xa0\x26\x72\x86\x29\x24\x63\xe1\x12\x50\x29\xa9\x52\x68\x83\x7a\x11\x59\xab\x1c\xb5\x60\xf7\x78\x21\x2c\xa4\x9d\x95\x5e\xc3\x02\xae\x3d\xa4\x5e\xfd\x81\x75\xc9\x32\xfc\xa5\x2c\xad\xab\x25\x35\xec\x12\xe2\x38\x0d\x20\x2d\x19\x00\xa3\xb6\xb0\x6e\xf8\x46\x48\x85\xaf\xd8\xe3\x2e\xae\xe4\xef\xf2\x33\x2a\x8b\xff\x55\xb0\x44\xdd\xfe\xad\xfe\x1b\x95\x1c\xe1\x52\x1b\x58\xe8\x35\xc4\x71\x90\x74\xff\xa7\xd0\x6c\x95\x98\x50\x9b\x9c\xa5\x4b\x10\xbc\x1c\xb4\xbb\xd9\x10\x16\xbc\x80\x66\x09\xf2\x9e\x1a\xe4\xe3\x18\xc2\x8e\xfa\x35\xb9\xbe\xf9\x91\x34\xda\x68\xb1\xf0\xbe\x1a\x87\xbd\xb0\xc3\x43\xb1\x93\x96\xb6\x51\x2f\x8e\x87\x53\x54\x66\xf5\x86\x4a\x57\x24\xf1\x53\x4d\x93\x2d\x24\x35\xc8\x8e\x95\x3c\x87\x69\x91\x8d\xda\xc3\xf5\x53\x7d\x13\x2f\xc1\x95\xa8\x27\xf6\x37\xc9\x45\x32\x89\xd5\x4e\xea\x12\xa8\x86\x69\xea\x27\xba\xf4\xf5\xf9\x9f\x22\xf2\x71\xa4\xe1\x7d\x61\xdf\x05\x5b\xbc\x8a\x29\x7d\xc7\x4a\x70\xaf\xd1\x3b\xf7\x75\x85\x8d\x01\x5e\xd5\x25\xd2\x55\xa3\xc1\xdc\x21\x18\x3a\xf3\xda\x25\x2a\xa8\xd0\xdc\xc9\xdc\x4d\x42\xd2\x4c\x7c\xa6\x21\x52\x92\x42\x72\x7d\x73\xbb\x37\x18\x4c\x40\x9f\x9c\x13\x24\xcd\xea\xd2\xb2\x94\xa4\xbe\xfc\x6e\x58\xff\x14\xd5\x17\x22\xda\x8a\xe3\x31\x3d\x9f\x06\x35\x82\x4b\xac\xbd\xf3\x9f\xba\xc0\x28\x2e\xe1\x9f\x42\x57\x35\xab\x94\x46\x0b\x53\xd5\x36\x78\x92\x1c\x9b\xfb\xd4\x76\x25\x29\x3d\x59\x53\x0e\x61\xe3\xa1\x52\xb6\xeb\x9e\x37\xb0\x06\x53\xd5\x43\xfe\x2e\xd7\xfe\x09\xe8\xab\xa2\x3f\xf5\x15\xb9\xcc\x98\x98\x26\x4e\x67\x02\x15\x70\x61\x50\x15\x2c\xc3\xd5\xf1\x94\x49\x37\x71\xaf\xec\xa0\xde\x76\x41\xbe\x3b\xa6\x20\xb8\xb5\xa2\x68\xa1\x3f\x73\x93\xdd\xc1\x8e\x72\x75\x6f\x47\x42\xcf\x96\xad\x5a\x46\x97\x87\xd3\x7c\x19\x2d\x16\xfe\xea\xd8\x79\x81\x23\x33\x10\x78\x12\x77\xa9\x57\x10\xbc\x24\xa9\x65\xe1\x41\x5b\x1f\xd8\xf2\x33\xfa\xcd\x69\x27\x82\xdd\x62\x30\x61\x38\x57\x7c\x87\xca\xc9\x66\x79\x9e\xd2\x6c\x35\xa9\xd1\x9d\xa5\x5b\x37\x66\xda\xfd\xd0\xe7\xcb\x23\xa5\x2f\x4a\xb6\xe9\x6b\x8f\x0f\x7a\xfe\x5c\x96\x4c\x6c\x80\x94\xfc\x4a\x33\x04\x07\x14\xdb\x63\x9d\x80\x86\x1a\x61\x78\x9d\x0e\x1d\xf0\x28\xc5\x3b\x56\xa6\x9e\xc0\x5d\x14\xf2\xea\xe8\x3b\x7f\x3c\xc6\x73\x34\x26\x64\xf0\x4b\x41\x9e\x23\x5d\x17\x41\xa7\x06\xdc\x3d\x6f\xbc\xcf\x2b\x5a\xa2\x26\x4e\x37\xdc\xdc\x6d\x6f\x57\x99\xac\x4e\x75\x5d\x7c\xff\xc3\x69\xfd\x2b\x11\x39\xe1\xe8\x11\xcf\x04\x9a\xa4\xfd\xa3\x7f\xf0\x1a\x4f\x6e\xd3\x71\xc9\xfc\x8f\xd1\x96\x3d\x2c\x1d\xc3\xa6\x3d\x73\xe9\xc3\x9a\x90\xbd\x3b\x5e\xec\xdd\x02\x0c\xe4\xa0\xef\x04\xf7\x36\x75\x1d\x4d\xe8\xdc\xb3\x61\x67\x48\xb0\x6a\xb0\xf6\x1b\xce\x9c\xaa\x4b\x86\x56\xd2\x92\x6b\x43\x9b\x68\x2d\xb5\xe6\xb7\x65\x3f\xcd\x6e\xd2\x35\x49\xc6\xf6\x9e\xb2\x19\xd0\x24\x85\xeb\x9b\x03\x5f\xa6\xaa\xa9\x87\x2a\x76\x8f\x49\x7f\xbe\x84\x12\xe7\xdf\x3c\x7a\xed\x32\x59\xef\x13\x3b\xe2\xb3\x1a\x43\x09\x68\x70\xed\x7f\x0f\xc1\x3f\x35\x8e\x21\xc4\xfc\xd2\xb3\xfd\x8e\xd5\x34\x36\x33\x64\x91\x84\xa8\x82\x8a\xd5\x21\xd3\x96\x2c\x67\xfe\xe0\x86\xf5\xa0\x5f\x33\xfa\xfd\x40\x07\xad\xc3\x0b\xfa\x38\xb2\x9e\xbc\x63\xf5\x75\xf3\x60\x33\xd1\xc6\xdd\x54\xfe\x93\x1e\xf8\xcb\x5a\x71\x61\x8a\x64\xd2\x81\xc9\xd3\x3c\x8d\x97\xd0\xa4\x9e\x13\x5a\x17\xfc\x7d\xf1\x8d\x72\x69\xe0\xe7\x35\x9c\xc1\xb3\x67\x04\x91\x34\x29\xfc\x74\xbc\xac\x61\x4e\x73\x0a\xd7\xcd\xcd\x7f\xcc\x53\xe4\x47\xea\xeb\x66\xdc\x56\x98\xb6\x81\xa0\xc6\xe1\xc6\xdb\x1d\xe6\xf6\xdf\x00\x00\x00\xff\xff\xbd\xac\xe3\x41\x8d\x0f\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0xef, 0x12, 0xdd, 0xf3, 0x10, 0x15, 0xc5, 0xf4, 0x0, 0x3, 0xd9, 0x93, 0x13, 0xf8, 0xa9, 0x27, 0x3a, 0x1a, 0xfd, 0xb6, 0xa5, 0xdb, 0x5, 0x98, 0x91, 0xad, 0x4d, 0x45, 0x37, 0x85, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
