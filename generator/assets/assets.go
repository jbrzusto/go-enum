// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.744kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x0a\x29\x73\xec\x0c\x7b\xeb\xe6\x01\x43\xdb\x05\x1d\x90\xa6\x58\xb2\xbd\x18\x41\xc0\x48\x27\x9b\xb0\x44\xa9\x24\xed\xca\xd0\xf4\xdd\x87\x23\x29\x99\x56\xe4\x74\x18\x5a\x3f\x59\xbc\xff\xbf\xfb\x1d\x79\x4d\x73\x09\x29\x66\x5c\x20\x84\x6b\x64\x29\xca\xb0\x6d\x83\xf9\x1c\xde\x96\x29\xc2\x0a\x05\x4a\xa6\x31\x85\xa7\x3d\xac\xca\x4b\x14\xdb\x82\x84\xef\x6e\xe1\xe3\xed\x3d\xbc\x7f\xf7\xe1\xfe\x55\x10\x54\x2c\xd9\xb0\x15\x42\xd3\xcc\xdc\xdf\xb6\x0d\x02\x5e\x54\xa5\xd4\x10\x05\x00\x00\x61\x56\xe8\x30\x88\x83\xa6\x41\x91\xc2\x25\xc9\xfd\xc8\xe4\x97\xe2\x26\xa5\x50\x64\x42\xb2\x33\x3a\xfc\xc8\x0a\x84\x37\x0b\x98\xd1\xc7\xcc\x7c\x91\xf1\x91\x5c\x55\x2c\x19\x28\xd9\xa3\x5e\x73\xc7\xa4\x22\x85\x94\x27\x1a\xc2\x9c\x29\x5d\x66\x99\x42\x1d\xc2\x95\x53\x02\xc9\xc4\x0a\xe1\x4c\x7e\x10\x29\xd6\x53\x32\xc9\xb7\x9e\xd3\xbf\xe9\x53\x41\xdb\x06\x13\xe3\x91\x7c\xdc\x1a\x1f\xa4\x53\xe5\xdb\x64\x73\xec\xd8\xc6\xfc\x07\x32\x2e\x95\x86\xb6\x6d\x1a\x38\x2b\x7b\x03\xb5\x7d\x72\x21\xac\xe7\x2e\xb0\x0b\x00\x3c\x03\xfc\xdc\x69\x98\xaa\xc3\xc7\xb0\x6d\xe7\x73\xb8\xdb\xf0\xaa\xc2\x14\x8c\xa8\x69\x30\x57\x68\xce\x9b\xc6\x69\x7f\x92\x98\xf1\x1a\x53\xb2\x6a\x5b\xe0\x0a\x18\x09\x3b\xb0\xda\x16\xca\x0c\xf4\xbe\xc2\x83\x89\x3d\x37\xad\xe9\x0a\xe4\x59\x17\xfd\x6d\x59\x14\x28\x34\x09\xfc\x30\xde\x31\xe9\x5b\x53\x70\x3f\x2f\x9e\xe9\x04\x39\x1f\x4f\xef\x50\xab\x03\xe0\xca\x60\xe5\xa7\xbb\x00\x5e\x6a\x66\x15\x05\xc2\x55\x8f\x63\xdb\xc2\x0f\xe0\xe1\xda\x97\x60\x61\x71\xfa\x7e\xab\x7c\xcd\xe7\x21\x4e\x7a\x3b\x7b\x34\x3d\x23\x07\xa6\xab\xc7\x8d\xb6\x7f\x1c\xd5\x2c\x0e\x31\xb1\x1b\x34\x16\x55\xce\x34\x42\xa8\xb4\xe4\x62\x85\x32\x84\x19\x75\x98\x26\xe8\x13\x93\x0a\x9b\xe6\x40\xd9\xb6\x05\xa6\xc9\x44\x2b\xd0\x25\x24\xa5\xd8\xa1\xd4\xc0\xc0\x1a\xd3\x19\x35\xd2\x37\x08\xb2\xad\x48\xc6\x3c\x45\x82\x28\x63\x0d\x63\x88\x8e\x85\x53\x40\x29\x4b\x19\x43\xe3\xf5\x8b\xc0\x9a\xa5\xa8\x04\xdb\xe0\xad\x30\x2e\xcd\x64\x74\x1a\xc6\xe1\xc2\xb9\x54\xb3\x3f\xb1\xca\x59\x82\xbf\xe5\xb9\x09\x35\x25\x7a\x4e\x21\x0c\x63\xcf\xa5\x01\x03\x0c\xa3\x79\x06\xf5\x14\xca\x0d\xc1\xf8\x78\x9c\x8d\xa1\xff\x92\x9c\x3c\xfc\x4c\x1a\x4d\x30\x99\x48\xd4\x5b\x29\xc8\x44\xf0\x3c\x98\x18\x8a\x51\x7e\xa4\xa5\x4c\x5a\x9d\xca\xa0\xec\xab\x78\x0a\x59\xa1\x67\xef\xa9\xc0\x2c\x0a\xcf\x15\xf1\x5f\x94\x04\xe3\x8e\xe5\x3c\x85\x21\x14\x5a\xee\x61\x79\xae\x1e\xc2\x29\xd8\x42\xba\x0a\xff\x28\xb9\x88\x06\xb9\x1a\x3e\x4f\x81\x2a\x8d\x63\xc7\xfb\xdc\x01\xf5\x8d\x32\x72\x79\xc4\xfe\x54\x99\xbb\xd2\x34\xa8\x60\x52\xad\x59\x0e\xf6\x86\xbe\xb1\x5f\xf7\x58\x6b\xe0\x45\x95\x23\x0d\xa4\x02\xbd\x46\xd0\x74\xe6\xb4\x73\x94\x50\xa0\x5e\x97\xa9\xe5\x4b\x54\x0f\x62\xc6\xbe\xa7\x28\x86\x68\xf9\xf0\xb4\xd7\xe8\xf1\xa4\x2b\xce\x0a\xa2\x7a\x76\x67\x50\x8a\xe2\xd8\xb6\xc8\x52\xfa\x2f\x51\x7c\x25\xa3\xad\x38\x9d\xd3\xc5\x30\xa9\x23\x77\x91\xb1\xb7\xf1\x63\x9b\x18\xe5\x25\xdc\xf3\x60\xbb\x66\x94\xe2\x60\xa2\x8b\xca\x24\x4f\x92\x53\xd3\x11\x1b\x56\x92\xd2\xab\x05\xd5\xe0\x13\x0f\xa5\x34\xac\xbb\xa8\x61\x01\xba\xa8\xfa\xfa\x6d\xad\xdd\x45\xd9\x75\x45\x7d\xee\x3a\x72\x97\x30\x31\x2c\x9c\xce\x04\x4a\xe0\x42\xa3\xcc\x58\x82\xb3\xd3\x25\x93\x6e\x64\x5f\x9e\x5e\xbd\x69\xbd\x7a\x77\x4c\x82\x37\xdb\x41\x30\x51\x5f\xb8\x4e\xd6\xb0\xa3\x5a\xed\x0d\x1b\xd1\xe5\x6e\xba\x96\x30\xd5\x69\xbe\x09\x26\x13\x37\xc3\x3b\x27\xb0\x60\x7a\x02\x07\xe2\x2e\x76\x0a\x82\xe7\x24\x35\x28\x3c\xa3\xf5\x01\x2d\x37\xa3\xdf\x1d\x76\x02\xd8\x3e\x96\x03\x84\x53\xc9\x77\x28\xad\x6c\x14\xe7\x21\xcc\x46\x93\x88\x6e\x2d\xed\x13\x3c\x42\xf7\x03\xcf\xa7\x27\x5a\x9f\xe5\x6c\xd5\xf5\x1e\x9f\x71\xfe\xba\xcc\x99\x58\x01\x29\xb9\x67\xbe\x4f\x0e\x28\xb7\x97\x98\x80\x9a\x88\xd0\xdf\xe1\x07\x06\xbc\x08\xf1\x8e\xe5\xb1\x03\x70\x17\xf8\xb8\x5a\xf8\xae\x5f\xce\xf1\x1a\xb5\xf6\x11\xfc\x5a\x92\xd7\x48\xd7\x85\xc7\x54\x0f\xbb\x8b\xda\xc5\xbc\xa7\x55\x63\x10\x74\xc5\xf5\x7a\xfb\x34\x4b\xca\x62\xae\xaa\xec\xc7\x9f\xe6\xd5\xef\x04\xe4\x00\xa3\x17\x22\x93\xd3\x28\xee\x9e\xc6\x43\xd4\x70\x70\x9b\x1e\xb7\xcc\xfd\x39\xda\x3c\xfb\xa7\xb9\xdf\x3e\x47\x2e\x7d\x58\x90\x67\x17\x8e\x67\x7b\xbb\x14\x02\x05\xe8\x98\x60\xdf\xa6\xb6\xa5\x09\x1d\x7b\x36\xcc\x0c\x09\x56\xf4\xd6\x6e\x0f\x18\x53\xb5\xc5\xd0\xe2\x96\x73\xa5\x69\x5f\xab\x4a\xa5\xf8\x53\xde\x4d\xb3\x9d\x74\x45\x92\x63\x7b\x07\xd9\x88\xd3\x28\x86\xe5\xc3\x01\x2f\x5d\x54\xc4\xa1\x82\x6d\x30\xea\xce\xa7\x90\xe3\xf8\x9b\x47\xaf\x5d\x52\x56\xfb\xc8\x8c\xf8\xa8\x46\xdf\x02\x1a\x5c\xb3\x51\x7b\x8b\xbe\x45\x08\x31\xbd\x73\x68\xdf\xb0\x8a\xc6\x66\x04\x2c\x92\x10\x54\x50\xb0\xca\x47\xda\x80\x65\xcd\x9f\xdd\xb0\xce\xe9\x7f\x19\xfd\x6e\xa0\x3d\xea\xf0\x8c\x3e\x4e\xac\x27\x37\xac\x5a\xd6\xcf\x36\x13\xa5\xed\x4d\xe5\x3e\xe9\x81\xbf\xab\x24\x17\x3a\x8b\x06\x0c\x8c\xce\xd3\x38\x9c\x42\x1d\x3b\x4c\x68\x5d\x70\xf7\xc5\x77\xaa\xa5\x86\x5f\x17\x70\x05\xaf\x5f\x93\x8b\xa8\x8e\xe1\x97\xd3\x6d\xf5\x6b\x1a\x53\x58\xd6\x0f\xff\xb3\x4e\x91\x9e\xe8\xaf\x9d\x71\xd3\x61\xda\x06\xbc\x1e\xcf\xf2\xf2\x0b\x4a\xf3\xf2\xb4\x87\xb1\xfd\x37\x00\x00\xff\xff\xe1\x9a\xde\xbc\xa0\x0e\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x4b, 0x72, 0xa, 0xca, 0x6e, 0x2f, 0xe9, 0x4c, 0x7f, 0x7, 0x43, 0x7c, 0x34, 0xd9, 0x29, 0x7c, 0x75, 0x6a, 0x3b, 0xe8, 0xa8, 0xd9, 0x98, 0xf5, 0xc3, 0x12, 0x2b, 0x9a, 0x8b, 0x35, 0x94}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
