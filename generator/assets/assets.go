// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.762kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x0b\xb1\x73\x9d\x0c\x7b\xeb\xe6\x01\x43\xdb\x05\x1d\xd0\xa6\x58\xb2\xbd\x18\x41\xc0\x48\x27\x9b\xb0\x44\xa9\x24\xed\xca\xd0\xf4\xdd\x87\x23\x29\x99\x96\xed\xb4\x18\x56\x3f\x59\xbc\xff\xbf\xfb\x1d\x79\x6d\xfb\x0a\x32\xcc\x85\x44\x88\x57\xc8\x33\x54\x71\xd7\x45\x97\x97\xf0\xa6\xca\x10\x96\x28\x51\x71\x83\x19\x3c\xee\x60\x59\xbd\x42\xb9\x29\x49\xf8\xf6\x06\x3e\xde\xdc\xc1\xbb\xb7\xef\xef\x9e\x45\x51\xcd\xd3\x35\x5f\x22\xb4\xed\xcc\xff\xed\xba\x28\x12\x65\x5d\x29\x03\x49\x04\x00\x10\xe7\xa5\x89\x23\x16\xb5\x2d\xca\x0c\x5e\x91\x3c\x8c\x4c\x7e\x29\x6e\x5a\x49\x4d\x26\x24\xbb\xa0\xc3\x8f\xbc\x44\x78\x3d\x87\x19\x7d\xcc\xec\x17\x19\x1f\xc8\x75\xcd\xd3\x91\x92\x3b\x1a\x34\xb7\x5c\x69\x52\xc8\x44\x6a\x20\x2e\xb8\x36\x55\x9e\x6b\x34\x31\x5c\x79\x25\x50\x5c\x2e\x11\x2e\xd4\x7b\x99\x61\x33\x25\x93\x62\x13\x38\xfd\x9b\x3e\x35\x74\x5d\x34\xb1\x1e\xc9\xc7\x8d\xf5\x41\x3a\x75\xb1\x49\xd7\x87\x8e\x5d\xcc\x7f\x20\x17\x4a\x1b\xe8\xba\xb6\x85\x8b\x6a\x30\xd0\x9b\x47\x1f\xc2\x79\xee\x03\xfb\x00\x20\x72\xc0\xcf\xbd\x86\xad\x3a\x7e\x88\xbb\xee\xf2\x12\x6e\xd7\xa2\xae\x31\x03\x2b\x6a\x5b\x2c\x34\xda\xf3\xb6\x3d\xc4\x83\x22\x7a\xfb\x4f\x0a\x73\xd1\x60\x46\xb2\xae\x03\xa1\x81\x87\xea\x5d\x07\x55\x0e\x66\x57\x53\x03\x83\x90\xe4\x01\x65\xd6\x97\x2c\xf2\x3e\x9f\x37\x55\x59\xa2\x34\x24\x70\x81\x8f\x8e\x49\xdf\x99\x82\xff\x7d\x7b\x7a\xfb\xea\x3d\x24\x57\x16\xbd\x30\xdd\x39\x88\xca\x70\xa7\x28\x11\xae\x06\x64\xbb\x0e\x7e\x80\x00\xe9\xa1\x04\x07\x94\xd7\x0f\x9b\x17\x6a\x1e\x87\x38\xeb\xed\xe2\xc1\x76\x91\x1c\xd8\x3e\x1f\xb6\xde\xfd\xf1\xe4\x73\x38\x30\xe2\x3b\x18\x2c\xeb\x82\x1b\x84\x58\x1b\x25\xe4\x12\x55\x0c\x33\xea\x39\xcd\xd4\x27\xae\x34\xb6\xed\x9e\xc4\x5d\x07\xdc\x90\x89\xd1\x60\x2a\x48\x2b\xb9\x45\x65\x80\x83\x33\xa6\x33\x6a\x64\x68\x10\xe5\x1b\x99\x9e\xf2\x94\x48\x22\x91\x33\x64\x90\x1c\x0a\xa7\x80\x4a\x55\x8a\x41\x1b\xf4\x8b\xc0\x9a\x65\xa8\x25\x5f\xe3\x8d\xb4\x2e\xed\xac\xf4\x1a\xd6\xe1\xdc\xbb\xd4\xb3\x3f\xb1\x2e\x78\x8a\xbf\x15\x85\x0d\x35\x25\xc2\x4e\x21\x8e\x59\xe0\xd2\x82\x01\x96\xe3\x22\x87\x66\x0a\xd5\x9a\x60\x7c\x38\xcc\xc6\x0e\xc4\x82\x9c\xdc\xff\x4c\x1a\x6d\x34\x99\x28\x34\x1b\x25\xc9\x44\x8a\x22\x9a\x58\x8a\x51\x7e\xa4\xa5\x6d\x5a\xbd\xca\xa8\xec\x2b\x36\x85\xbc\x34\xb3\x77\x54\x60\x9e\xc4\xcf\x35\xf1\x5f\x56\x04\xe3\x96\x17\x22\x83\x31\x14\x46\xed\x60\xf1\x5c\xdf\xc7\x53\x70\x85\xf4\x15\xfe\x51\x09\x99\x8c\x72\xb5\x7c\x9e\x02\x55\xca\x98\xe7\x7d\xe1\x81\xfa\x9f\x32\xf2\x79\xb0\x70\xaa\xec\xed\x69\x1b\x54\x72\xa5\x57\xbc\x00\x77\x67\x7f\x70\x5f\x77\xd8\x18\x10\x65\x5d\x20\x0d\xa4\x06\xb3\x42\x30\x74\xe6\xb5\x0b\x54\x50\xa2\x59\x55\x99\xe3\x4b\xd2\x8c\x62\xb2\xd0\x53\xc2\x20\x59\xdc\x3f\xee\x0c\x06\x3c\xe9\x8b\x73\x82\xa4\x99\xdd\x5a\x94\x12\xc6\x5c\x8b\x1c\xa5\xff\x92\xe5\x57\x32\xda\xc8\xf3\x39\xbd\x1c\x27\x75\xe0\x2e\xb1\xf6\x2e\x3e\x73\x89\x51\x5e\xd2\x3f\x18\xae\x6b\x56\x89\x45\x13\x53\xd6\x36\x79\x92\x9c\x9b\x0e\x66\x59\x49\x4a\xcf\xe6\x54\x43\x48\x3c\x54\xca\xb2\xee\x65\x03\x73\x30\x65\x3d\xd4\xef\x6a\xed\x2f\xca\xbe\x2b\xfa\x73\xdf\x91\xdb\x94\xcb\x71\xe1\x74\x26\x51\x81\x90\x06\x55\xce\x53\x9c\x9d\x2f\x99\x74\x13\xf7\x16\x0d\xea\x6d\x17\xd4\xbb\xe5\x0a\x82\xd9\x8e\xa2\x89\xfe\x22\x4c\xba\x82\x2d\xd5\xea\x6e\xd8\x84\x2e\x77\xdb\xb5\x94\xeb\x5e\xf3\x75\x34\x99\xf8\x19\xde\x7a\x81\x03\x33\x10\x78\x10\xb7\xcc\x2b\x48\x51\x90\xd4\xa2\x70\x44\xeb\x3d\x5a\x7e\x46\xbf\x3b\xec\x04\xb0\x7b\x3e\x47\x08\x67\x4a\x6c\x51\x39\xd9\x49\x9c\xc7\x30\x5b\x4d\x22\xba\xb3\x74\x8f\xf2\x09\xba\xef\x79\x3e\x3d\xd3\xfa\xbc\xe0\xcb\xbe\xf7\x78\xc4\xf9\xeb\xaa\xe0\x72\x09\xa4\xe4\x1f\xfe\x21\x39\xa0\xdc\x9e\x62\x02\x1a\x22\xc2\x70\x87\xef\x19\xf0\x24\xc4\x5b\x5e\x30\x0f\xe0\x36\x0a\x71\x75\xf0\x5d\x3f\x9d\xe3\x35\x1a\x13\x22\xf8\xb5\x24\xaf\x91\xae\x8b\x80\xa9\x01\x76\x2f\x1b\x1f\xf3\x8e\x56\x8d\x51\xd0\xa5\x30\xab\xcd\xe3\x2c\xad\xca\x4b\x5d\xe7\x3f\xfe\x74\x59\xff\x4e\x40\x8e\x30\x7a\x22\x32\x39\x4d\x58\xff\x34\xee\xa3\xc6\xa3\xdb\xf4\xb0\x65\xfe\xcf\xc1\x2e\x3a\x3c\xcd\xc3\x3e\x7a\xe2\xd2\x87\x39\x79\xf6\xe1\x44\xbe\x73\x6b\x22\x50\x80\x9e\x09\xee\x6d\xea\x3a\x9a\xd0\x53\xcf\x86\x9d\x21\xc9\xcb\xc1\xda\xef\x01\xa7\x54\x5d\x31\xb4\xb8\x15\x42\x1b\xda\xd7\xea\x4a\x6b\xf1\x58\xf4\xd3\xec\x26\x5d\x93\xe4\xd0\xde\x43\x76\xc2\x69\xc2\x60\x71\xbf\xc7\xcb\x94\x35\x71\xa8\xe4\x6b\x4c\xfa\xf3\x29\x14\x78\xfa\xcd\xa3\xd7\x2e\xad\xea\x5d\x62\x47\xfc\xa4\xc6\xd0\x02\x1a\x5c\xbb\x63\x07\xab\xbf\x43\x08\x31\xbb\xf5\x68\x7f\xe0\x35\x8d\xcd\x09\xb0\x48\x42\x50\x41\xc9\xeb\x10\x69\x0b\x96\x33\x3f\xba\x61\xbd\xd3\x6f\x19\xfd\x7e\xa0\x03\xea\x88\x9c\x3e\xce\xac\x27\x1f\x78\xbd\x68\x8e\x36\x13\x6d\xdc\x4d\xe5\x3f\xe9\x81\xbf\xad\x95\x90\x26\x4f\x46\x0c\x4c\x9e\x67\x2c\x9e\x42\xc3\x3c\x26\xb4\x2e\xf8\xfb\xe2\x3b\xd5\xd2\xc0\xaf\x73\xb8\x82\x17\x2f\xc8\x45\xd2\x30\xf8\xe5\x7c\x5b\xc3\x9a\x4e\x29\x2c\x9a\xfb\xff\x58\xa7\xcc\xce\xf4\xd7\xcd\xb8\xed\x30\x6d\x03\x41\x8f\x67\x45\xf5\x05\x95\x7d\x79\xba\xfd\xd8\xfe\x1b\x00\x00\xff\xff\x16\x42\xf3\xc5\xb2\x0e\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0xee, 0x1e, 0x5a, 0x3d, 0x27, 0x42, 0x62, 0xd7, 0x65, 0x23, 0x18, 0x4d, 0x13, 0x9, 0x83, 0xe6, 0xad, 0xc9, 0x74, 0xd2, 0xbe, 0xc8, 0x38, 0xc, 0x2a, 0xf0, 0xc, 0xc1, 0x47, 0xd3, 0x1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
