// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.893kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdf\x6f\xdb\xb6\x13\x7f\xb6\xfe\x8a\xab\x90\x16\x52\xbf\xae\x93\x2f\xf6\xd6\xcd\x03\x86\xb6\x0b\x3a\xa0\x4d\xb1\x64\x7b\x98\x11\x04\x8c\x74\xb2\x09\x4b\x94\x4a\xd2\xae\x0c\x4d\xff\xfb\x70\x24\x25\x53\xb2\x9c\x16\xc3\x9a\x27\x8b\xf7\xfb\xf3\xb9\x23\x2f\x4d\xf3\x0a\x52\xcc\xb8\x40\x08\x37\xc8\x52\x94\x61\xdb\x06\x97\x97\xf0\xa6\x4c\x11\xd6\x28\x50\x32\x8d\x29\x3c\x1e\x60\x5d\xbe\x42\xb1\x2b\x48\xf8\xf6\x06\x3e\xde\xdc\xc1\xbb\xb7\xef\xef\x9e\x05\x41\xc5\x92\x2d\x5b\x23\x34\xcd\xc2\xfd\x6c\xdb\x20\xe0\x45\x55\x4a\x0d\x51\x00\x00\x10\x66\x85\x0e\x83\x38\x68\x1a\x14\x29\xbc\x22\xb9\x1f\x99\xfc\x52\xdc\xa4\x14\x8a\x4c\x48\x76\x41\x87\x1f\x59\x81\xf0\x7a\x09\x0b\xfa\x58\x98\x2f\x32\x1e\xc8\x55\xc5\x92\x91\x92\x3d\xea\x35\xf7\x4c\x2a\x52\x48\x79\xa2\x21\xcc\x99\xd2\x65\x96\x29\xd4\x21\x5c\x39\x25\x90\x4c\xac\x11\x2e\xe4\x7b\x91\x62\x3d\x27\x93\x7c\xe7\x39\xfd\x93\x3e\x15\xb4\x6d\x30\x33\x1e\xc9\xc7\x8d\xf1\x41\x3a\x55\xbe\x4b\xb6\x43\xc7\x36\xe6\xdf\x90\x71\xa9\x34\xb4\x6d\xd3\xc0\x45\xd9\x1b\xa8\xdd\xa3\x0b\x61\x3d\x77\x81\x5d\x00\xe0\x19\xe0\xe7\x4e\xc3\x54\x1d\x3e\x84\x6d\x7b\x79\x09\xb7\x5b\x5e\x55\x98\x82\x11\x35\x0d\xe6\x0a\xcd\x79\xd3\x0c\xf1\xa0\x88\xce\xfe\x93\xc4\x8c\xd7\x98\x92\xac\x6d\x81\x2b\x60\xbe\x7a\xdb\x42\x99\x81\x3e\x54\x44\xa0\x17\x92\x3c\xa0\x48\xbb\x92\x79\xd6\xe5\xf3\xa6\x2c\x0a\x14\x9a\x04\x36\xf0\xc9\x31\xe9\x5b\x53\x70\x7f\xdf\x9e\xde\xb1\x7a\x07\xc9\x95\x41\xcf\x4f\x77\x09\xbc\xd4\xcc\x2a\x0a\x84\xab\x1e\xd9\xb6\x85\xff\x81\x87\x74\x5f\x82\x05\xca\xe9\xfb\xe4\xf9\x9a\xa7\x21\xce\x7a\xbb\x78\x30\x2c\x92\x03\xc3\xf3\x90\x7a\xfb\xc3\x35\x9f\xc5\x21\xa6\x7e\x07\x8d\x45\x95\x33\x8d\x10\x2a\x2d\xb9\x58\xa3\x0c\x61\x41\x9c\xd3\x4c\x7d\x62\x52\x61\xd3\x1c\x9b\xb8\x6d\x81\x69\x32\xd1\x0a\x74\x09\x49\x29\xf6\x28\x35\x30\xb0\xc6\x74\x46\x44\xfa\x06\x41\xb6\x13\xc9\x94\xa7\x48\x50\x13\x59\xc3\x18\xa2\xa1\x70\x0e\x28\x65\x29\x63\x68\x3c\xbe\x08\xac\x45\x8a\x4a\xb0\x2d\xde\x08\xe3\xd2\xcc\x4a\xa7\x61\x1c\x2e\x9d\x4b\xb5\xf8\x1d\xab\x9c\x25\xf8\x4b\x9e\x9b\x50\x73\x6a\xd8\x39\x84\x61\xec\xb9\x34\x60\x00\x0c\xda\xc2\x84\xa1\x1a\x0f\xef\xd5\x5f\x28\xcb\x41\x0c\xe2\xcb\x84\x59\x42\x18\x7a\xd9\x75\x7f\x12\xf5\x4e\x8a\x11\x06\xd1\x55\x3c\x07\xc1\xf3\x5e\xbb\x9d\x4c\x61\xc6\x33\xa8\xe7\x50\x6e\x89\xc9\x87\xa1\x0b\x33\x93\x2b\x0a\x7d\xff\x23\x69\x34\xc1\x6c\xe6\x62\xd5\xd6\xf7\xcc\x74\x39\xe5\x4e\x5a\xca\x64\x3d\x3b\x9f\x4e\x56\xe8\xc5\x3b\xc2\x38\x8b\xc2\xe7\x8a\x46\x50\x94\xc4\xe4\x9e\xe5\x3c\x85\x31\x1b\x5a\x1e\x60\xf5\x5c\xdd\x87\x73\xb0\x58\x76\x20\xff\x56\x72\x11\x8d\x72\x35\x23\x35\x07\x02\x3b\x8e\xdd\xe8\xe5\x8e\xab\xff\x28\x23\x97\x47\xec\x0f\xb6\xb9\xc0\x0d\x79\x05\x93\x6a\xc3\x72\xb0\xcf\xc6\x07\xfb\x75\x87\xb5\x06\x5e\x54\x39\xd2\x9d\xa0\x40\x6f\x10\x34\x9d\x39\xed\x1c\x25\x14\xa8\x37\x65\x6a\x5b\x36\xaa\x47\x31\x63\xdf\x53\x14\x43\xb4\xba\x7f\x3c\x68\xf4\x5a\xb5\x2b\xce\x0a\xa2\x7a\x71\x6b\x50\x8a\x62\x47\xbf\x9d\xaa\x3f\x44\xf1\x95\x8c\x76\xe2\x7c\x4e\x2f\xc7\x49\x0d\xdc\x45\xc6\xde\xc6\x8f\x6d\x62\x94\x97\x70\x6f\x96\x65\xcd\x28\xc5\xc1\x4c\x17\x95\x49\x9e\x24\xe7\x06\x34\x36\x5d\x49\x4a\xcf\x96\x54\x83\xdf\x78\x28\xa5\xe9\xba\x97\x35\x2c\x41\x17\x55\x5f\xbf\xad\xb5\xbb\xab\x3b\x56\xd4\xe7\x8e\x91\xdb\x84\x89\x71\xe1\x74\x26\x50\x02\x17\x1a\x65\xc6\x12\x5c\x9c\x2f\x99\x74\x23\xfb\x1c\xf6\xea\x4d\xeb\xd5\xbb\x67\x12\xbc\xeb\x25\x08\x66\xea\x0b\xd7\xc9\x06\xf6\x54\xab\xbd\xe4\x23\x7a\x5f\x0c\x6b\x09\x53\x9d\xe6\xeb\x60\x36\x73\xd7\xc8\xde\x09\x2c\x98\x9e\xc0\x81\xb8\x8f\x9d\x82\xe0\x39\x49\x0d\x0a\x27\x6d\x7d\x44\xcb\xcd\xe8\x77\x87\x9d\x00\xb6\x2f\xf8\x08\xe1\x54\xf2\x3d\x4a\x2b\x9b\xc4\x79\x0c\xb3\xd1\xa4\x46\xb7\x96\x76\x2f\x98\x68\xf7\x63\x9f\xcf\xcf\x50\x9f\xe5\x6c\xdd\x71\x8f\x27\x3d\x7f\x5d\xe6\x4c\xac\x81\x94\xdc\xee\xd1\x27\x07\x94\xdb\x53\x9d\x80\x9a\x1a\xa1\x7f\x46\x8e\x1d\xf0\x24\xc4\x7b\x96\xc7\x0e\xc0\x7d\xe0\xe3\x6a\xe1\xbb\x7e\x3a\xc7\x6b\xd4\xda\x47\xf0\x6b\x49\x5e\x23\x5d\x17\x5e\xa7\x7a\xd8\xbd\xac\x5d\xcc\x3b\xda\x76\x46\x41\xd7\x5c\x6f\x76\x8f\x8b\xa4\x2c\x2e\x55\x95\xfd\xff\x87\xcb\xea\x57\x02\x72\x84\xd1\x13\x91\xc9\x69\x14\x77\xaf\xf3\x31\x6a\x38\xba\x4d\x87\x94\xb9\x1f\x83\x75\xb8\xdf\x0e\xfa\x95\x78\xe2\xd2\x87\x25\x79\x76\xe1\x78\x76\xb0\x9b\x2a\x50\x80\xae\x13\xec\xdb\xd4\xb6\x34\xa1\x53\xcf\x86\x99\x21\xc1\x8a\xde\xda\xad\x22\x53\xaa\xb6\x18\xda\x1d\x73\xae\x34\xad\x8c\x55\xa9\x14\x7f\xcc\xbb\x69\xb6\x93\xae\x48\x32\xb4\x77\x90\x4d\x38\x8d\x62\x58\xdd\x1f\xf1\xd2\x45\x45\x3d\x54\xb0\x2d\x46\xdd\xf9\x1c\x72\x9c\x7e\xf3\xe8\xb5\x4b\xca\xea\x10\x99\x11\x9f\xd4\xe8\x29\xa0\xc1\x35\x6b\xbe\xf7\xdf\x87\x45\x08\x31\xbd\x75\x68\x7f\x60\x15\x8d\xcd\x04\x58\x24\x21\xa8\xa0\x60\x95\x8f\xb4\x01\xcb\x9a\x9f\xdc\xb0\xce\xe9\xb7\x8c\x7e\x37\xd0\x5e\xeb\xf0\x8c\x3e\xce\xac\x27\x1f\x58\xb5\xaa\x4f\x36\x13\xa5\xed\x4d\xe5\x3e\xe9\x81\xbf\xad\x24\x17\x3a\x8b\x46\x1d\x18\x3d\x4f\xe3\x70\x0e\x75\xec\x30\xa1\x75\xc1\xdd\x17\xdf\xa9\x96\x1a\x7e\x5e\xc2\x15\xbc\x78\x41\x2e\xa2\x3a\x86\x9f\xce\xd3\xea\xd7\x34\xa5\xb0\xaa\xef\xff\x65\x9d\x22\x3d\xc3\xaf\x9d\x71\xc3\x30\x6d\x03\x1e\xc7\x8b\xbc\xfc\x82\xd2\xbc\x3c\xed\x71\x6c\xff\x09\x00\x00\xff\xff\xeb\x42\x0d\x77\x35\x0f\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x49, 0xaf, 0x14, 0x70, 0x4b, 0x52, 0x23, 0x96, 0x73, 0x4f, 0xff, 0xd3, 0x2f, 0x3e, 0x2d, 0xf4, 0xcc, 0xa6, 0x59, 0x50, 0x19, 0x38, 0xfc, 0x11, 0x41, 0x8e, 0xfe, 0xae, 0xd1, 0x4, 0x59}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
